# local staging compose
version: "3.8"
name: "ytaudio staging"
services:
  db-pg:
    image: postgres:15-alpine
    container_name: db_postgres_container
    env_file: ./api/config/.env
#    environment:
#      POSTGRES_USER : ${APP_DB_NAME:-docker}
#      POSTGRES_PASSWORD: ${APP_DB_PASSWORD:-docker}
#      POSTGRES_DB: ${APP_DB_NAME:-docker}
    volumes:
      - pg_data_vol1:/var/lib/postgresql/data
    networks:
      - net-stg
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U docker -d docker" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
  api:
    build:
      context: ./api
      dockerfile: ./Dockerfile
    image: app/app_api
    container_name: app_api
#    command: bash -c "python manage.py runserver 0.0.0.0:8000"
    command: bash -c "python main.py"
#    restart: on-failure
    depends_on:
      - db-pg
#      - amqp
    networks:
      - net-stg
    env_file: ./api/config/.env
    environment:
      APP_API_PORT: 8000
#      APP_API_HOST: http://gui
#      APP_SERVICE_URL: amqp://guest:guest@amqp:5672/
      DJANGO_SETTINGS_MODULE: server.settings
      DJANGO_DATABASE_HOST: db-pg
      DJANGO_ENV: production
    volumes:
      - static_vol:/app/staticfiles
      - media_vol:/app/mediafiles
  front:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    image: app/app_front
  nginx:
    build: ./nginx
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - static_vol:/var/www/backend/static
      - media_vol:/var/www/backend/mediafiles
    ports:
      - "80:80"
    depends_on:
      - api
      - front
    networks:
      - net-stg

networks:
  net-stg:
    driver: bridge

volumes:
  pg_data_vol1: {}
  static_vol: {}
  media_vol: {}
  front_vol: {}
